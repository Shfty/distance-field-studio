[gd_scene load_steps=21 format=2]

[ext_resource path="res://addons/distance_field_studio/shaders/sphere_trace.shader" type="Shader" id=1]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field/sphere_trace_params.gd" type="Script" id=2]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field/distance_field.gd" type="Script" id=3]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field_editor/function_palette.gd" type="Script" id=4]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field_editor/camera_pitch.gd" type="Script" id=5]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field/distance_field_instance.gd" type="Script" id=6]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field_editor/distance_field_editor.gd" type="Script" id=7]
[ext_resource path="res://addons/distance_field_studio/resources/shader_library/distance_field_library.tres" type="Resource" id=8]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field_editor/camera_yaw.gd" type="Script" id=9]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field_editor/distance_field_graph.gd" type="Script" id=10]
[ext_resource path="res://addons/distance_field_studio/scripts/distance_field_editor/viewport_container.gd" type="Script" id=11]
[ext_resource path="res://resources/distance_field/sphere.tres" type="Resource" id=12]

[sub_resource type="ProceduralSky" id=1]

[sub_resource type="Environment" id=2]
background_mode = 3
background_sky = SubResource( 1 )
background_color = Color( 0.301961, 0.301961, 0.301961, 1 )

[sub_resource type="World" id=3]
environment = SubResource( 2 )

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_back,diffuse_burley,specular_schlick_ggx;

const float INFINITY = 1.0 / 0.0;

// Generated constants
const vec3 VEC3_X = vec3(1, 0, 0);
const vec3 VEC3_Y = vec3(0, 1, 0);
const vec3 VEC3_Z = vec3(0, 0, 1);


// Sphere tracing parameters

uniform int max_steps: hint_range(1, 1024) = 128;
uniform float over_relax_factor: hint_range(1,2) = 1.4;
uniform float anti_alias_gradient: hint_range(0,16) = 1.0;
uniform bool hollow = true;
uniform bool force_hit = false;

uniform bool draw_steps = false;
uniform vec4 step_min_color: hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform vec4 step_mid_color: hint_color = vec4(0.5, 0.5, 0.5, 1.0);
uniform vec4 step_max_color: hint_color = vec4(1.0, 1.0, 1.0, 1.0);

// Continuity parameters
uniform int continuity_iterations: hint_range(0, 16) = 3;
uniform float continuity_threshold: hint_range(0.001, 1) = 0.001;

// Generated uniforms


varying float near_plane;
varying float far_plane;
varying float instance_count;
varying vec2 texel_size;

varying mat4 world_matrix;
varying mat4 inverse_world_matrix;
varying mat3 world_basis;
varying mat3 inverse_world_basis;

varying mat4 camera_matrix;
varying mat3 camera_basis;
varying mat3 inverse_camera_basis;

varying mat4 inverse_projection_matrix;

varying float fov;
varying float aspect;

// Generated SDF library



// Generated signed distance function
float sdf(vec3 IN_POSITION) {
	float OUT_DISTANCE;
	// sphere_trace:signed_distance_function
	return OUT_DISTANCE;
}

// Generated normal library


// Generated normal function
vec3 normal(vec3 IN_POSITION) {
	vec3 OUT_NORMAL;
	// sphere_trace:normal_function
	return OUT_NORMAL;
}

vec3 tangent(vec3 IN_POSITION) {
	vec3 OUT_TANGENT;
	// sphere_trace:tangent_function
	return OUT_TANGENT;
}

vec3 binormal(vec3 IN_POSITION) {
	vec3 OUT_BINORMAL;
	// sphere_trace:binormal_function
	return OUT_BINORMAL;
}

// Generated color library


// Generated color functions
vec4 color(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	vec4 OUT_COLOR = vec4(1);
	// sphere_trace:color_function
	return OUT_COLOR;
}

float metallic(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	float OUT_METALLIC = 0.0;
	// sphere_trace:metallic_function
	return OUT_METALLIC;
}

float specular(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	float OUT_SPECULAR = 0.5;
	// sphere_trace:specular_function
	return OUT_SPECULAR;
}

float roughness(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	float OUT_ROUGHNESS = 1.0;
	// sphere_trace:roughness_function
	return OUT_ROUGHNESS;
}

vec3 emission(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	vec3 OUT_EMISSION = vec3(0);
	// sphere_trace:emission_function
	return OUT_EMISSION;
}

float ao(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	float OUT_AO = 1.0;
	// sphere_trace:ao_function
	return OUT_AO;
}

float ao_light_affect(vec3 IN_POSITION, vec3 IN_NORMAL, vec3 IN_TANGENT, vec3 IN_BINORMAL) {
	float OUT_AO_LIGHT_AFFECT = 0.0;
	// sphere_trace:ao_light_affect_function
	return OUT_AO_LIGHT_AFFECT;
}

void generate_perspective_rays(in vec3 view, out vec3 ray_origin, out vec3 ray_normal, out float pixel_radius) {
	ray_origin = inverse_world_basis * (camera_matrix[3].xyz - world_matrix[3].xyz);
    ray_normal = inverse_world_basis * camera_basis * view;
	pixel_radius = length(fwidth(view));
}

void generate_orthographic_rays(in vec2 screen_uv, out vec3 ray_origin, out vec3 ray_normal, out float pixel_radius) {
	vec3 view_origin = (inverse_projection_matrix * vec4(screen_uv * 2.0 - 1.0, 0.0, 1.0)).xyz;
	ray_origin = (inverse_world_matrix * camera_matrix * vec4(view_origin, 1.0)).xyz;
    ray_normal = inverse_world_basis * camera_basis * vec3(0, 0, 1);
	pixel_radius = length(fwidth(ray_origin));
}

void sphere_trace(in vec3 o, in vec3 d, in float pixel_radius, out float dist, out float steps, out float hit) {
	float omega = over_relax_factor;
	float t = near_plane;
	float candidate_error = INFINITY;
	float candidate_t = near_plane;
	float prev_radius = 0.0;
	float step_length = 0.0;
	float function_sign = sdf(o) < 0.0 ? -1.0 : 1.0;
	
	if(!hollow && function_sign == -1.0) {
		dist = t;
		hit = 1.0;
		return
	}
	
	int i = 0;
	for(i; i < max_steps; ++i) {
		float signed_radius = function_sign * sdf(d * t + o);
		float radius = abs(signed_radius);
		bool sor_fail = omega > 1.0 && (radius + prev_radius) < step_length;
		if(sor_fail) {
			step_length -= omega * step_length;
			omega = 1.0;
		}
		else {
			step_length = signed_radius * omega;
		}
		
		prev_radius = radius;
		
		float error = radius / t;
		
		if(!sor_fail && error < candidate_error) {
			candidate_t = t;
			candidate_error = error;
		}
		
		if(!sor_fail && error < pixel_radius || t > far_plane) {
			break;
		}
		
		t += step_length;
	}
	
	if(!force_hit)
	{
		if(candidate_error > pixel_radius) {
			float max_error = pixel_radius + (pixel_radius * anti_alias_gradient);
			if(candidate_error < max_error) {
				dist = candidate_t;
				steps = float(i);
				hit = smoothstep(max_error, pixel_radius, candidate_error);
				return
			}
			else if(t > far_plane) {
				return;
			}
		}
	}
	
	dist = candidate_t;
	steps = float(i);
	hit = 1.0;
}

vec3 continuity(vec3 p, vec3 o, vec3 d, int it, float t) {
	for(int i = 0; i < it; ++i) {
		p = p + d * (abs(sdf(p)) - length(p - o) * t);
	}
	return p;
}

void vertex() {
	near_plane = 0.05;
	far_plane = 500.0;
	
	world_matrix = WORLD_MATRIX;
	inverse_world_matrix = inverse(WORLD_MATRIX);
	world_basis = mat3(WORLD_MATRIX);
	inverse_world_basis = inverse(world_basis);
	
	camera_matrix = CAMERA_MATRIX;
	camera_basis = mat3(CAMERA_MATRIX);
	inverse_camera_basis = inverse(camera_basis);
	
	inverse_projection_matrix = INV_PROJECTION_MATRIX;
	
	fov = 2.0 * atan(1.0 / PROJECTION_MATRIX[1][1]);
	aspect = PROJECTION_MATRIX[1][1] / PROJECTION_MATRIX[0][0];
}

void fragment() {
	vec3 ray_origin, ray_normal;
	float pixel_radius;
	
	if(PROJECTION_MATRIX[3][3] == 0.0) {
		generate_perspective_rays(-VIEW, ray_origin, ray_normal, pixel_radius);
	}
	else {
		generate_orthographic_rays(SCREEN_UV, ray_origin, ray_normal, pixel_radius);
	}
	
	float dist = INFINITY;
	float steps = 0.0;
	float hit = 0.0;
	sphere_trace(ray_origin, ray_normal, pixel_radius, dist, steps, hit);
	
	vec3 pos = ray_origin + ray_normal * dist;
	pos = continuity(pos, ray_origin, ray_normal, continuity_iterations, continuity_threshold);
	
	vec3 normal = normal(pos);
	vec3 view_normal = inverse_camera_basis * world_basis * normal;
    NORMAL = view_normal;
	
	vec3 tangent = tangent(pos);
	vec3 view_tangent = inverse_camera_basis * world_basis * tangent;
	TANGENT = tangent;
	
	vec3 binormal = binormal(pos);
	vec3 view_binormal = inverse_camera_basis * world_basis * binormal;
	BINORMAL = binormal;
	
	if(draw_steps) {
		float step_factor = steps / float(max_steps);
		vec3 step_color;
		if(step_factor <= 0.5) {
			step_color = mix(step_min_color.xyz, step_mid_color.xyz, step_factor * 2.0f);
		}
		else {
			step_color = mix(step_mid_color.xyz, step_max_color.xyz, step_factor);
		}
		ALBEDO = vec3(0.0);
		EMISSION = step_color;
	}
	else {
		vec4 color = color(pos, normal, tangent, binormal);
		ALBEDO = color.rgb;
		ALPHA = color.a;
		
		METALLIC = metallic(pos, normal, tangent, binormal);
		SPECULAR = specular(pos, normal, tangent, binormal);
		ROUGHNESS = roughness(pos, normal, tangent, binormal);
		EMISSION = emission(pos, normal, tangent, binormal);
		AO = ao(pos, normal, tangent, binormal);
		AO_LIGHT_AFFECT = ao_light_affect(pos, normal, tangent, binormal);
	}
	
	ALPHA *= hit;
	
	vec4 clip_pos = PROJECTION_MATRIX * INV_CAMERA_MATRIX * world_matrix * vec4(pos, 1.0);
	DEPTH = clip_pos.z / clip_pos.w * 0.5 + 0.5;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/max_steps = 128
shader_param/over_relax_factor = 1.4
shader_param/anti_alias_gradient = 1.0
shader_param/hollow = true
shader_param/force_hit = false
shader_param/draw_steps = false
shader_param/step_min_color = Color( 0, 0, 0, 1 )
shader_param/step_mid_color = Color( 0.5, 0.5, 0.5, 1 )
shader_param/step_max_color = Color( 1, 1, 1, 1 )
shader_param/continuity_iterations = 3
shader_param/continuity_threshold = 0.001

[sub_resource type="CubeMesh" id=6]
flip_faces = true
size = Vector3( 4, 4, 4 )

[sub_resource type="Resource" id=7]
resource_name = "Sphere Trace Params"
script = ExtResource( 2 )
max_steps = 128
over_relax_factor = 1.4
anti_alias_gradient = 1.0
hollow = true
force_hit = false
continuity_iterations = 3
continuity_threshold = 0.001
draw_steps = false
step_min_color = Color( 0, 0, 0, 1 )
step_mid_color = Color( 0.66, 0.66, 0.66, 1 )
step_max_color = Color( 1, 1, 1, 1 )

[sub_resource type="Resource" id=8]
script = ExtResource( 3 )
update = false
base_shader = ExtResource( 1 )
shader_library = ExtResource( 8 )
generated_shader = SubResource( 4 )
shader_params = SubResource( 7 )
uniforms = {

}

[node name="DistanceFieldEditor" type="Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 0, 500 )
script = ExtResource( 7 )
__meta__ = {
"_edit_use_anchors_": false
}
shader_library = ExtResource( 8 )
distance_field = ExtResource( 12 )

[node name="HBoxContainer" type="HBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/separation = 0
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="TabContainer" type="TabContainer" parent="HBoxContainer"]
margin_right = 724.0
margin_bottom = 600.0
size_flags_horizontal = 3

[node name="Distance Field Function" type="GraphEdit" parent="HBoxContainer/TabContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 32.0
margin_right = -4.0
margin_bottom = -4.0
mouse_filter = 1
size_flags_horizontal = 3
right_disconnects = true
script = ExtResource( 10 )
distance_field = ExtResource( 12 )
target_resource = "distance_field_function"
input_names = [ "Position" ]
input_types = [ "vec3" ]
input_glsl = [ "IN_POSITION" ]
output_names = [ "Distance", "Normal", "Tangent", "Binormal" ]
output_types = [ "float", "vec3", "vec3", "vec3" ]
output_properties = [ "signed_distance_function", "normal_function", "tangent_function", "binormal_function" ]
output_glsl = [ "OUT_DISTANCE = %s;", "OUT_NORMAL = %s;", "OUT_TANGENT = %s;", "OUT_BINORMAL = %s;" ]

[node name="Material Function" type="GraphEdit" parent="HBoxContainer/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 32.0
margin_right = -4.0
margin_bottom = -4.0
mouse_filter = 1
size_flags_horizontal = 3
right_disconnects = true
script = ExtResource( 10 )
distance_field = ExtResource( 12 )
target_resource = "material_function"
input_names = [ "Position", "Normal", "Tangent", "Binormal" ]
input_types = [ "vec3", "vec3", "vec3", "vec3" ]
input_glsl = [ "IN_POSITION", "IN_NORMAL", "IN_TANGENT", "IN_BINORMAL" ]
output_names = [ "Color", "Metallic", "Specular", "Roughness", "Emission", "Ambient Occlusion", "AO Light Affect" ]
output_types = [ "vec4", "float", "float", "float", "vec3", "float", "float" ]
output_properties = [ "color_function", "metallic_function", "specular_function", "roughness_function", "emission_function", "ao_function", "ao_light_affect_function" ]
output_glsl = [ "OUT_COLOR = %s;", "OUT_METALLIC = %s;", "OUT_SPECULAR = %s;", "OUT_ROUGHNESS = %s;", "OUT_EMISSION = %s;", "OUT_AO = %s;", "OUT_AO_LIGHT_AFFECT = %s;" ]

[node name="Shader Parameters" type="GraphEdit" parent="HBoxContainer/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 32.0
margin_right = -4.0
margin_bottom = -4.0
mouse_filter = 1
size_flags_horizontal = 3
right_disconnects = true
script = ExtResource( 10 )
distance_field = ExtResource( 12 )
target_resource = "shader_params"
input_names = [  ]
input_types = [  ]
input_glsl = [  ]
output_names = [ "Max Steps", "Over Relax Factor", "Anti-Alias Gradient", "Hollow", "Force Hit", "Draw Steps", "Continuity Iterations", "Continuity Threshold" ]
output_types = [ "int", "float", "float", "bool", "bool", "bool", "int", "float" ]
output_properties = [ "signed_distance_function", "normal_function", "tangent_function", "binormal_function" ]
output_glsl = [ "OUT_DISTANCE = %s;", "OUT_NORMAL = %s;", "OUT_TANGENT = %s;", "OUT_BINORMAL = %s;" ]

[node name="VBoxContainer" type="VBoxContainer" parent="HBoxContainer"]
margin_left = 724.0
margin_right = 1024.0
margin_bottom = 600.0
custom_constants/separation = 0

[node name="MarginContainer" type="MarginContainer" parent="HBoxContainer/VBoxContainer"]
margin_right = 300.0
margin_bottom = 300.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="ViewportContainer" type="ViewportContainer" parent="HBoxContainer/VBoxContainer/MarginContainer"]
margin_right = 300.0
margin_bottom = 300.0
rect_min_size = Vector2( 300, 300 )
script = ExtResource( 11 )

[node name="Viewport" type="Viewport" parent="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer"]
size = Vector2( 300, 300 )
own_world = true
world = SubResource( 3 )
handle_input_locally = false
render_target_update_mode = 3

[node name="DistanceFieldInstance" type="MeshInstance" parent="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer/Viewport"]
material_override = SubResource( 5 )
mesh = SubResource( 6 )
material/0 = null
script = ExtResource( 6 )
billboard_size = Vector2( 4, 4 )
distance_field = SubResource( 8 )

[node name="CameraYaw" type="Spatial" parent="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer/Viewport"]
transform = Transform( 0.707107, 0, 0.707106, 0, 0.999999, 0, -0.707107, 0, 0.707106, 0, 0, 0 )
script = ExtResource( 9 )

[node name="CameraPitch" type="Spatial" parent="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer/Viewport/CameraYaw"]
transform = Transform( 1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866026, 0, 0, 0 )
script = ExtResource( 5 )

[node name="Camera" type="Camera" parent="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer/Viewport/CameraYaw/CameraPitch"]
transform = Transform( 1, 0, 0, 0, 1, -6.55651e-07, 0, 0, 1, 0, 0, 7.5 )
visible = false
keep_aspect = 0

[node name="FunctionPalette" type="ScrollContainer" parent="HBoxContainer/VBoxContainer"]
margin_top = 300.0
margin_right = 300.0
margin_bottom = 600.0
size_flags_vertical = 3
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="HBoxContainer/VBoxContainer/FunctionPalette"]
margin_right = 288.0
margin_bottom = 360.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = 0
[connection signal="mouse_entered" from="HBoxContainer/TabContainer" to="HBoxContainer/VBoxContainer/FunctionPalette" method="hide_popup_menus"]
[connection signal="popup_request" from="HBoxContainer/TabContainer/Material Function" to="." method="popup_function_dialog"]
[connection signal="popup_request" from="HBoxContainer/TabContainer/Shader Parameters" to="." method="popup_function_dialog"]
[connection signal="gui_input" from="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer" to="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer/Viewport/CameraYaw/CameraPitch" method="viewport_input"]
[connection signal="gui_input" from="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer" to="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer/Viewport/CameraYaw" method="viewport_input"]
[connection signal="mouse_entered" from="HBoxContainer/VBoxContainer/MarginContainer/ViewportContainer" to="HBoxContainer/VBoxContainer/FunctionPalette" method="hide_popup_menus"]
